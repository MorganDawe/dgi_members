<?php

/**
 * @file
 * Contains dgi_members.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\views\ViewExecutable;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function dgi_members_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the dgi_members module.
    case 'help.page.dgi_members':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Facilitates display of compounds objects') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_views_pre_render().
 */
function dgi_members_views_pre_render(ViewExecutable $view) {
  if (isset($view) && ($view->id() == 'compound_navigation')) {
    $members = dgi_members_get_members();
    $active = dgi_members_get_active();

    if ($active) {
      $active_node_id = $active->id();
      $view->element['#attached']['library'][] = 'dgi_members/compound_parts';
      $view->element['#attached']['drupalSettings']['dgi_members']['has_members']
        = (empty($members) || !$members) ? FALSE : TRUE;
      $view->element['#attached']['drupalSettings']['dgi_members']['active_nid']
        = $active_node_id;
    }
  }
}

/**
 * Implements hook_form_form_id_alter().
 */
function dgi_members_form_block_form_alter(&$form, $form_state, $form_id) {
  // In following with how Islandora core is handling block visibility,
  // implementing this hook to unset our custom condition. There's too many to
  // use well within the core block placement UI, and no other reasonable way to
  // filter them out. See https://www.drupal.org/node/2284687. Use
  // /admin/structure/context instead if you want to use these conditions
  // to alter block layout.
  // This hook is also doing the same thing in Islandora core, to hide the
  // conditions it provides.
  unset($form['visibility']['node_compound_current_has_term']);
}

/**
 * Implements hook_entity_view_mode_alter().
 */
function dgi_members_entity_view_mode_alter(&$view_mode, EntityInterface $entity) {
  // Change the view mode based on user input from a 'view_mode_alter'.
  // This is very similar to the implementation of this hook in the core
  // islandora module. The difference here is that we are only allowing the view
  // mode to be switched away from a known view mode,
  // (repository_item_top_viewer), and if the entity (node) being processed
  // differs from the menu route object, evaluations are allowed to continue if
  // said node is a member of the menu router object.
  if ($view_mode == "repository_item_top_viewer") {
    $storage = \Drupal::service('entity_type.manager')->getStorage('entity_view_mode');
    $context_manager = \Drupal::service('context.manager');
    if (dgi_members_entity_is_member($entity)) {
      foreach ($context_manager->getActiveReactions('\Drupal\islandora\Plugin\ContextReaction\ViewModeAlterReaction') as $reaction) {
        // Construct the new view mode's machine name.
        $entity_type = $entity->getEntityTypeId();
        $mode = $reaction->execute();
        $machine_name = "$entity_type.$mode";

        // Try to load it.
        $new_mode = $storage->load($machine_name);

        // If successful, alter the view mode.
        if ($new_mode) {
          $view_mode = $mode;
        }
        else {
          // Otherwise, leave it be, but log a message.
          \Drupal::logger('dgi_members')
            ->info("EntityViewMode $machine_name does not exist.  View mode cannot be altered.");
        }
      }
    }
  }
}

/**
 * Determine if the view mode entity is a member of the menu router object.
 *
 * @param Drupal\Core\Entity\EntityInterface $entity
 *   A node to evaluate.
 *
 * @return bool
 *   TRUE if is a member, FALSE if not.
 */
function dgi_members_entity_is_member(EntityInterface $entity) {
  if ($entity) {
    $members = dgi_members_get_members();
    if (in_array($entity->id(), $members)) {
      return TRUE;
    }
  }
  return FALSE;
}

/**
 * Retrieve the active member, if available.
 *
 * @return bool||Node
 *   FALSE if no node available, or the active Node.
 */
function dgi_members_get_active() {
  $active_member = \Drupal::request()->query->get('active_member');
  if ($active_member) {
    return \Drupal::entityTypeManager()->getStorage('node')->load($active_member);
  }

  if (\Drupal::service('dgi_members.entity_service')->pageEntityIsCompoundObjectNode()) {
    $nodes = \Drupal::service('dgi_members.entity_service')->membersQueryExecute();

    if (empty($nodes)) {
      return FALSE;
    }

    return \Drupal::entityTypeManager()->getStorage('node')->load(reset($nodes));
  }
  return FALSE;
}

/**
 * Return members of the menu route object.
 *
 * @return bool||array
 *   FALSE if no member available, indexed array of members otherwise.
 */
function dgi_members_get_members() {
  return \Drupal::service('dgi_members.entity_service')->membersQueryExecute();
}
